{--

    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

        1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

--}
import Data.List
import Data.HashSet


-- 3000 is a reasonable guess ;)
pentagonals :: [Int]
pentagonals = [pentagonal n | n<-[1..3000]]

-- integer solutions :) kind of cool actually.
pentagonal :: Int -> Int
pentagonal n = n * (3*n-1) `div` 2

-- TODO: make array if this doesn't need to scale large
is_pentagonal n =  n `member` (fromList pentagonals)

-- the first number in this order is the minimizer
-- neigbours scale with (3n+1).. soo to be pentagonal
-- requires cheking neighbours all the way to n = 1827553.
-- so i neigbours apart would be i*(3n+1). 
-- Turns out none do so here is how i know the first is the minimizer
-- No need for advanced math ;)
main = print $ head $ [ pk - pj | pk <- pentagonals, pj <- (tail pentagonals) , pk > pj , is_pentagonal (pk + pj), is_pentagonal (pk - pj)]
